import json
from app import app, db
from models import Exercicio
from datetime import datetime

def populate_exercises():
    print("üèóÔ∏è Iniciando popula√ß√£o do banco de dados com exerc√≠cios...")
    
    # Verificar se j√° existem exerc√≠cios para n√£o duplicar
    existing_count = Exercicio.query.count()
    if existing_count > 6:  # J√° temos os exerc√≠cios iniciais
        print(f"‚úÖ Banco j√° possui {existing_count} exerc√≠cios. Pulando popula√ß√£o.")
        return
    
    exercicios = [
        # ========== EXERC√çCIOS FREEMIUM ==========
        {
            'pergunta': 'Qual m√©todo converte uma string em n√∫mero inteiro?',
            'codigo_exemplo': 'let numero = ___("42");\nconsole.log(numero); // 42',
            'resposta_correta': 'parseInt',
            'nivel': 'iniciante',
            'teoria': 'O m√©todo parseInt() converte uma string em um n√∫mero inteiro. Ele para a leitura quando encontra um caractere n√£o num√©rico.',
            'teoria_audio': '/static/audio/parseint.mp3',
            'premium': False,
            'tipo': 'completion'
        },
        {
            'pergunta': 'Como acessar o primeiro elemento de um array chamado "frutas"?',
            'codigo_exemplo': 'let frutas = ["ma√ß√£", "banana", "laranja"];\nlet primeira = frutas[___];',
            'resposta_correta': '0',
            'nivel': 'iniciante',
            'teoria': 'Arrays em JavaScript s√£o indexados come√ßando em 0. O primeiro elemento est√° na posi√ß√£o 0, o segundo na 1, e assim por diante.',
            'teoria_audio': '/static/audio/arrays.mp3',
            'premium': False,
            'tipo': 'completion'
        },
        {
            'pergunta': 'Qual ser√° o output do c√≥digo: console.log("10" + 5)?',
            'codigo_exemplo': 'console.log("10" + 5);',
            'resposta_correta': '105',
            'nivel': 'iniciante',
            'teoria': 'O operador "+" com string e n√∫mero realiza concatena√ß√£o. O n√∫mero √© convertido para string e as duas s√£o juntadas.',
            'teoria_audio': '/static/audio/concatenacao.mp3',
            'premium': False,
            'tipo': 'output'
        },
        {
            'pergunta': 'Como verificar se uma vari√°vel "idade" √© maior ou igual a 18?',
            'codigo_exemplo': 'let idade = 20;\nif (idade ___ 18) {\n  console.log("Maior de idade");\n}',
            'resposta_correta': '>=',
            'nivel': 'iniciante',
            'teoria': 'O operador ">=" verifica se o valor da esquerda √© maior ou igual ao valor da direita.',
            'teoria_audio': '/static/audio/maior_igual.mp3',
            'premium': False,
            'tipo': 'completion'
        },
        {
            'pergunta': 'Qual m√©todo adiciona um elemento ao final de um array?',
            'codigo_exemplo': 'let numeros = [1, 2, 3];\nnumeros.___(4);\n// numeros agora √© [1, 2, 3, 4]',
            'resposta_correta': 'push',
            'nivel': 'iniciante',
            'teoria': 'O m√©todo push() adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.',
            'teoria_audio': '/static/audio/push.mp3',
            'premium': False,
            'tipo': 'completion'
        },
        {
            'pergunta': 'Qual √© a diferen√ßa entre == e === em JavaScript?',
            'codigo_exemplo': '',
            'resposta_correta': '== compara valor, === compara valor e tipo',
            'nivel': 'intermediario',
            'teoria': 'O operador "==" faz convers√£o de tipo antes da compara√ß√£o (coer√ß√£o), enquanto "===" n√£o faz convers√£o e exige que valor E tipo sejam iguais.',
            'teoria_audio': '/static/audio/igualdade.mp3',
            'premium': False,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                '== compara valor, === compara valor e tipo',
                '== compara tipo, === compara valor',
                'N√£o h√° diferen√ßa',
                '== √© mais r√°pido que ==='
            ])
        },
        {
            'pergunta': 'Como criar um objeto vazio em JavaScript?',
            'codigo_exemplo': '',
            'resposta_correta': 'let obj = {};',
            'nivel': 'iniciante',
            'teoria': 'Objetos em JavaScript podem ser criados usando chaves {}. Esta √© a sintaxe de objeto literal, a forma mais comum de criar objetos.',
            'teoria_audio': '/static/audio/objetos.mp3',
            'premium': False,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'let obj = {};',
                'let obj = [];',
                'let obj = new Object;',
                'let obj = Object.create();'
            ])
        },
        {
            'pergunta': 'Qual m√©todo transforma um array em string?',
            'codigo_exemplo': 'let frutas = ["ma√ß√£", "banana"];\nlet resultado = frutas.___(",");\n// resultado: "ma√ß√£,banana"',
            'resposta_correta': 'join',
            'nivel': 'intermediario',
            'teoria': 'O m√©todo join() une todos os elementos de um array em uma string, usando um separador especificado.',
            'teoria_audio': '/static/audio/join.mp3',
            'premium': False,
            'tipo': 'completion'
        },

        # ========== EXERC√çCIOS PREMIUM (Conte√∫do Exclusivo) ==========
        {
            'pergunta': 'Como funciona o Event Loop em JavaScript?',
            'codigo_exemplo': 'console.log("1");\nsetTimeout(() => console.log("2"), 0);\nconsole.log("3");\n// Qual a ordem de output?',
            'resposta_correta': '1, 3, 2',
            'nivel': 'avancado',
            'teoria': 'O Event Loop √© o mecanismo que permite JavaScript ser ass√≠ncrono. Ele gerencia a call stack, task queue e microtask queue. Fun√ß√µes s√≠ncronas executam primeiro, depois microtasks (Promises), e finalmente macrotasks (setTimeout).',
            'teoria_audio': '/static/audio/event_loop.mp3',
            'premium': True,
            'tipo': 'output'
        },
        {
            'pergunta': 'O que √© Closure em JavaScript e como funciona?',
            'codigo_exemplo': 'function criarContador() {\n  let count = 0;\n  return function() {\n    count++;\n    return count;\n  };\n}',
            'resposta_correta': 'Fun√ß√£o que lembra do escopo onde foi criada',
            'nivel': 'avancado',
            'teoria': 'Closure √© quando uma fun√ß√£o tem acesso a vari√°veis de um escopo externo mesmo ap√≥s esse escopo ter sido removido da call stack. Isso permite criar fun√ß√µes com "estado privado" e √© fundamental para muitos padr√µes em JavaScript.',
            'teoria_audio': '/static/audio/closure.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'Fun√ß√£o que lembra do escopo onde foi criada',
                'Fun√ß√£o que fecha outras fun√ß√µes',
                'M√©todo para fechar janelas',
                'Tipo de loop infinito'
            ])
        },
        {
            'pergunta': 'Como funciona o Prototype Chain em JavaScript?',
            'codigo_exemplo': 'function Animal(nome) {\n  this.nome = nome;\n}\nAnimal.prototype.falar = function() {\n  console.log(this.nome + " faz um som");\n};',
            'resposta_correta': 'Mecanismo de heran√ßa baseado em prot√≥tipos',
            'nivel': 'avancado',
            'teoria': 'JavaScript usa heran√ßa prototipal. Cada objeto tem um prot√≥tipo interno que pode ter seu pr√≥prio prot√≥tipo, formando uma cadeia. Quando uma propriedade n√£o √© encontrada no objeto, a busca sobe pela cadeia de prot√≥tipos.',
            'teoria_audio': '/static/audio/prototype.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'Mecanismo de heran√ßa baseado em prot√≥tipos',
                'Tipo de array especial',
                'M√©todo para clonar objetos',
                'Sistema de versionamento'
            ])
        },
        {
            'pergunta': 'Qual a diferen√ßa entre call, apply e bind?',
            'codigo_exemplo': 'function saudacao(periodo, nome) {\n  console.log(`Boa ${periodo}, ${nome}!`);\n}',
            'resposta_correta': 'call e apply executam agora, bind retorna fun√ß√£o',
            'nivel': 'avancado',
            'teoria': 'Todos tr√™s m√©todos permitem definir o valor de "this" em uma fun√ß√£o. call() aceita argumentos separados, apply() aceita array de argumentos, e bind() retorna uma nova fun√ß√£o com "this" definido, sem executar imediatamente.',
            'teoria_audio': '/static/audio/call_apply_bind.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'call e apply executam agora, bind retorna fun√ß√£o',
                'Todos executam a fun√ß√£o imediatamente',
                'bind √© mais r√°pido que call e apply',
                'N√£o h√° diferen√ßa pr√°tica'
            ])
        },
        {
            'pergunta': 'Como funciona o Async/Await por baixo dos panos?',
            'codigo_exemplo': 'async function buscarDados() {\n  const resposta = await fetch(url);\n  const dados = await resposta.json();\n  return dados;\n}',
            'resposta_correta': 'Syntax sugar sobre Promises',
            'nivel': 'avancado',
            'teoria': 'Async/await √© syntax sugar sobre Promises que torna o c√≥digo ass√≠ncrono mais leg√≠vel. Uma fun√ß√£o async sempre retorna uma Promise, e await pausa a execu√ß√£o at√© que a Promise seja resolvida, sem bloquear o thread principal.',
            'teoria_audio': '/static/audio/async_await.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'Syntax sugar sobre Promises',
                'Novo tipo de thread',
                'M√©todo s√≠ncrono melhorado',
                'Substituto para callbacks'
            ])
        },
        {
            'pergunta': 'O que √© Currying em JavaScript?',
            'codigo_exemplo': 'function soma(a) {\n  return function(b) {\n    return a + b;\n  };\n}',
            'resposta_correta': 'T√©cnica de transformar fun√ß√£o multi-argumento em cadeia de fun√ß√µes de um argumento',
            'nivel': 'avancado',
            'teoria': 'Currying √© uma t√©cnica funcional onde uma fun√ß√£o com m√∫ltiplos argumentos √© transformada em uma sequ√™ncia de fun√ß√µes, cada uma recebendo um √∫nico argumento. Isso permite composi√ß√£o de fun√ß√µes e aplica√ß√£o parcial.',
            'teoria_audio': '/static/audio/currying.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'T√©cnica de transformar fun√ß√£o multi-argumento em cadeia de fun√ß√µes de um argumento',
                'M√©todo para cozinhar dados',
                'Tipo de loop para arrays',
                'Padr√£o de design para objetos'
            ])
        },
        {
            'pergunta': 'Como funciona a Memoiza√ß√£o para otimiza√ß√£o de performance?',
            'codigo_exemplo': 'function memoize(fn) {\n  const cache = {};\n  return function(...args) {\n    const key = JSON.stringify(args);\n    if (cache[key]) return cache[key];\n    return cache[key] = fn.apply(this, args);\n  };\n}',
            'resposta_correta': 'Cache de resultados de fun√ß√µes pesadas',
            'nivel': 'avancado',
            'teoria': 'Memoiza√ß√£o √© uma t√©cnica de otimiza√ß√£o que armazena os resultados de chamadas de fun√ß√£o caras e retorna o resultado em cache quando as mesmas entradas ocorrem novamente. √â especialmente √∫til para fun√ß√µes recursivas ou com c√°lculos intensivos.',
            'teoria_audio': '/static/audio/memoization.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'Cache de resultados de fun√ß√µes pesadas',
                'T√©cnica para memorizar c√≥digo',
                'M√©todo de compress√£o de dados',
                'Padr√£o para gerenciar mem√≥ria'
            ])
        },
        {
            'pergunta': 'O que s√£o Generators e como funcionam?',
            'codigo_exemplo': 'function* contadorInfinito() {\n  let i = 0;\n  while (true) {\n    yield i++;\n  }\n}',
            'resposta_correta': 'Fun√ß√µes que podem ser pausadas e retomadas',
            'nivel': 'avancado',
            'teoria': 'Generators s√£o fun√ß√µes especiais que podem ser pausadas e retomadas. Eles usam a palavra-chave yield para retornar valores m√∫ltiplos ao longo do tempo. S√£o √∫teis para lazy evaluation, iteradores customizados e controle ass√≠ncrono.',
            'teoria_audio': '/static/audio/generators.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'Fun√ß√µes que podem ser pausadas e retomadas',
                'Fun√ß√µes que geram n√∫meros aleat√≥rios',
                'M√©todo para criar arrays',
                'Tipo de loop para objetos'
            ])
        },
        {
            'pergunta': 'Como funciona o Web Workers API para multi-threading?',
            'codigo_exemplo': '// main.js\nconst worker = new Worker("worker.js");\nworker.postMessage("Hello");',
            'resposta_correta': 'Executa c√≥digo JavaScript em thread separado',
            'nivel': 'avancado',
            'teoria': 'Web Workers permitem executar c√≥digo JavaScript em threads em segundo plano, separados do thread principal da interface. Isso evita bloqueio da UI durante opera√ß√µes pesadas. Os workers se comunicam com o thread principal via mensagens.',
            'teoria_audio': '/static/audio/web_workers.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'Executa c√≥digo JavaScript em thread separado',
                'Trabalha com elementos da Web',
                'M√©todo para criar servidores',
                'API para trabalhar com arquivos'
            ])
        },
        {
            'pergunta': 'O que √© Tree Shaking e como otimiza bundles?',
            'codigo_exemplo': '// Webpack remove c√≥digo n√£o utilizado\nimport { func1, func2 } from "./module";\n// Se s√≥ func1 for usado, func2 √© removido',
            'resposta_correta': 'Remo√ß√£o de c√≥digo n√£o utilizado durante o build',
            'nivel': 'avancado',
            'teoria': 'Tree Shaking √© uma t√©cnica de otimiza√ß√£o que remove c√≥digo n√£o utilizado (dead code) dos bundles finais. Funciona analisando o grafo de depend√™ncias e eliminando exporta√ß√µes que n√£o s√£o importadas em nenhum lugar da aplica√ß√£o.',
            'teoria_audio': '/static/audio/tree_shaking.mp3',
            'premium': True,
            'tipo': 'multiple_choice',
            'opcoes': json.dumps([
                'Remo√ß√£o de c√≥digo n√£o utilizado durante o build',
                'T√©cnica para organizar arquivos',
                'M√©todo para cortar strings',
                'Padr√£o para estruturas de dados'
            ])
        }
    ]

    try:
        for exercicio_data in exercicios:
            # Verificar se o exerc√≠cio j√° existe
            existente = Exercicio.query.filter_by(pergunta=exercicio_data['pergunta']).first()
            if not existente:
                exercicio = Exercicio(**exercicio_data)
                db.session.add(exercicio)
                print(f"‚úÖ Adicionado: {exercicio_data['pergunta'][:50]}...")
        
        db.session.commit()
        total = Exercicio.query.count()
        print(f"üéâ Popula√ß√£o conclu√≠da! Total de exerc√≠cios no banco: {total}")
        
        # Estat√≠sticas
        freemium = Exercicio.query.filter_by(premium=False).count()
        premium = Exercicio.query.filter_by(premium=True).count()
        multipla_escolha = Exercicio.query.filter(Exercicio.tipo == 'multiple_choice').count()
        
        print(f"üìä Estat√≠sticas:")
        print(f"   - Freemium: {freemium} exerc√≠cios")
        print(f"   - Premium: {premium} exerc√≠cios")
        print(f"   - M√∫ltipla escolha: {multipla_escolha} exerc√≠cios")
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erro durante a popula√ß√£o: {str(e)}")
        raise

if __name__ == '__main__':
    with app.app_context():
        populate_exercises()